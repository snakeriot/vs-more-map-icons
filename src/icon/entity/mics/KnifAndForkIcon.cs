using Cairo;

namespace MoreMapIcons
{
    /**
     * Knife and fork icon.
     **/
    public class KnifeAndForkIcon : Icon
    {
        public float getHeight()
        {
            return 45;
        }

        public float getWidth()
        {
            return 45;
        }

        /**
        * Nom nom.
        *
        * @param context - {@link Context}
        **/
        public void Render(Context cr)
        {
            cr.NewPath();
            cr.MoveTo(32.460938, 0);
            cr.CurveTo(29.722656, 0, 27.441406, 2.117188, 27.246094, 4.847656);
            cr.LineTo(25.851563, 24.339844);
            cr.CurveTo(25.789063, 25.1875, 26.082031, 26.03125, 26.664063, 26.652344);
            cr.CurveTo(27.242188, 27.277344, 28.054688, 27.636719, 28.90625, 27.636719);
            cr.LineTo(28.988281, 27.636719);
            cr.LineTo(28.511719, 42.898438);
            cr.CurveTo(28.492188, 43.554688, 28.738281, 44.167969, 29.191406, 44.636719);
            cr.CurveTo(29.644531, 45.105469, 30.269531, 45.351563, 30.925781, 45.351563);
            cr.LineTo(32.925781, 45.351563);
            cr.CurveTo(34.257813, 45.351563, 35.367188, 44.300781, 35.367188, 42.96875);
            cr.LineTo(35.367188, 2.894531);
            cr.CurveTo(35.367188, 1.296875, 34.058594, 0, 32.460938, 0);
            cr.ClosePath();
            cr.FillPreserve();

            cr.NewPath();
            cr.MoveTo(20.945313, 0.03125);
            cr.LineTo(20.742188, 0.03125);
            cr.CurveTo(20.253906, 0.03125, 19.878906, 0.398438, 19.878906, 0.886719);
            cr.LineTo(19.878906, 9.476563);
            cr.CurveTo(19.878906, 10.238281, 19.242188, 10.859375, 18.480469, 10.859375);
            cr.LineTo(18.273438, 10.859375);
            cr.CurveTo(17.515625, 10.859375, 16.867188, 10.238281, 16.867188, 9.476563);
            cr.LineTo(16.867188, 0.886719);
            cr.CurveTo(16.867188, 0.398438, 16.503906, 0.03125, 16.015625, 0.03125);
            cr.LineTo(15.808594, 0.03125);
            cr.CurveTo(15.320313, 0.03125, 14.929688, 0.398438, 14.929688, 0.886719);
            cr.LineTo(14.929688, 9.476563);
            cr.CurveTo(14.929688, 10.238281, 14.308594, 10.859375, 13.546875, 10.859375);
            cr.LineTo(13.339844, 10.859375);
            cr.CurveTo(12.578125, 10.859375, 11.988281, 10.238281, 11.988281, 9.476563);
            cr.LineTo(11.988281, 0.886719);
            cr.CurveTo(11.988281, 0.398438, 11.566406, 0.03125, 11.078125, 0.03125);
            cr.LineTo(10.875, 0.03125);
            cr.CurveTo(10.386719, 0.03125, 9.980469, 0.398438, 9.980469, 0.886719);
            cr.LineTo(9.980469, 13.878906);
            cr.CurveTo(9.980469, 15.476563, 11.285156, 16.742188, 12.882813, 16.742188);
            cr.LineTo(13.269531, 16.742188);
            cr.LineTo(12.453125, 42.894531);
            cr.CurveTo(12.433594, 43.546875, 12.675781, 44.164063, 13.132813, 44.632813);
            cr.CurveTo(13.585938, 45.101563, 14.210938, 45.351563, 14.867188, 45.351563);
            cr.LineTo(16.789063, 45.351563);
            cr.CurveTo(17.441406, 45.351563, 18.066406, 45.101563, 18.523438, 44.632813);
            cr.CurveTo(18.976563, 44.164063, 19.222656, 43.539063, 19.203125, 42.886719);
            cr.LineTo(18.386719, 16.738281);
            cr.LineTo(18.9375, 16.738281);
            cr.CurveTo(20.535156, 16.738281, 21.816406, 15.476563, 21.816406, 13.878906);
            cr.LineTo(21.816406, 0.886719);
            cr.CurveTo(21.816406, 0.394531, 21.433594, 0.03125, 20.945313, 0.03125);
            cr.ClosePath();
            cr.FillPreserve();
        }
    }
}